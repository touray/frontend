// Mixins
//
// These are the default Frontend Build mixins. Frontend uses <a href="http://foundation.zurb.com/" target="_blank">Foundation</a> by default and if enabled provides a wide range of other mixins not listed below.
//
// Style guide: frontend.mixins

// container($width)
//
// Creates a max width container, designed to house your grid content.
//
// Compatible in IE6+, Firefox 2+, Safari 4+, Chrome 49+.
//
// $width - Defines the container max width. Default: <code>$global-width</code>
//
// Style guide: frontend.mixins.container
@mixin container($width: $global-width) {
  margin-left: auto;
  margin-right: auto;
  max-width: $width;
  width: 100%;
}

// css-grid($columns, $rows, $column-gaps, $grid-row-gaps, $type)
//
// Creates a CSS grid container. <i>To debug, view in Firefox inspector and enable the grid overlay.</i>
//
// Compatible in IE11+, Firefox 54+, Safari 10.1+, Chrome 59+.
//
// $columns - Defines the number of grid columns. Default: <code>$css-grid-columns</code>
// $rows - Defines the number of grid rows. Default: <code>(small: none, medium: none)</code>
// $column-gaps - Specifies the size of the grid lines between the columns. Default: <code>$css-grid-column-gaps</code>
// $row-gaps - Specifies the size of the grid lines between the rows. Default: <code>$css-grid-row-gaps</code>
// $type - Defines the grid formatting context. Default: <code>grid</code>
//
// Style guide: frontend.mixins.grid
@mixin css-grid($columns: $css-grid-columns, $rows: (small: none, medium: none), $column-gaps: $css-grid-column-gaps, $row-gaps: $css-grid-row-gaps, $type: grid) {
  // scss-lint:disable PropertySpelling
  display: $type;
  grid-column-gap: map-get($column-gaps, small);
  grid-row-gap: map-get($row-gaps, small);
  grid-template-columns: repeat(map-get($columns, small), 1fr);
  grid-template-rows: map-get($rows, small);

  @include breakpoint(medium) {
    grid-column-gap: map-get($column-gaps, medium);
    grid-row-gap: map-get($row-gaps, medium);
    grid-template-columns: repeat(map-get($columns, medium), 1fr);
    grid-template-rows: map-get($rows, medium);
  }
}

// css-grid-item($column-start, $column-end, $row-start, $row-end)
//
// Creates a CSS grid container item. <i>View in Firefox inspector to see a grid overlay.</i>
//
// Compatible in IE11+, Firefox 54+, Safari 10.1+, Chrome 59+.
//
// $column-start - Defines which column the grid item should start at. Default: <code>(small: auto, medium: auto)</code>
// $column-end - Defines which column the grid item should end at. Default: <code>(small: auto, medium: auto)</code>
// $row-start - Defines which row the grid item should start at. Default: <code>(small: auto, medium: auto)</code>
// $row-end - Defines which row the grid item should end at. Default: <code>(small: auto, medium: auto)</code>
//
// Style guide: frontend.mixins.grid-item
@mixin css-grid-item($column-start: (small: auto, medium: auto), $column-end: (small: auto, medium: auto), $row-start: (small: auto, medium: auto), $row-end: (small: auto, medium: auto)) {
  // scss-lint:disable PropertySpelling
  grid-column-end: map-get($column-end, small);
  grid-column-start: map-get($column-start, small);
  grid-row-end: map-get($row-end, small);
  grid-row-start: map-get($row-start, small);

  @include breakpoint(medium) {
    grid-column-end: map-get($column-end, medium);
    grid-column-start: map-get($column-start, medium);
    grid-row-end: map-get($row-end, medium);
    grid-row-start: map-get($row-start, medium);
  }
}
