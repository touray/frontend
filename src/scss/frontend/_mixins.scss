// Mixins
//
// These are the default Frontend Build mixins. Frontend uses <a href="http://foundation.zurb.com/" target="_blank">Foundation</a> by default and if enabled provides a wide range of other mixins not listed below.
//
// Style guide: frontend.mixins


// Variables
//
// Mixin default variables. To add/edit component variables, use <code>scss/_variables.scss</code>.
//
// $primary-color        - Primary application color.
// $global-width         - Application global width.
// $global-radius        - Application global radius.
// $css-grid-columns     - Responsive list for the number of columns at each breakpoint.
// $css-grid-column-gaps - Responsive list for the size of column gaps at each breakpoint.
// $css-grid-row-gaps    - Responsive list for the size of row gaps at each breakpoint.
//
// Style guide: frontend.mixins.variables
$primary-color: #1779ba !default;
$global-width:  rem-calc(1200) !default;
$global-radius: 0 !default;
$css-grid-columns: (
  small: 2,
  medium: 12
) !default;
$css-grid-column-gaps: (
  small: 20px,
  medium: 30px
) !default;
$css-grid-row-gaps: (
  small: 0,
  medium: 0
) !default;

// container($width)
//
// Creates a max width container, designed to house your grid content.
//
// Compatible in IE6+, Firefox 2+, Safari 4+, Chrome 49+.
//
// $width - Defines the container max width. Default: <code>$global-width</code>
//
// Style guide: frontend.mixins.container
@mixin container($width: $global-width) {
  margin-left: auto;
  margin-right: auto;
  max-width: $width;
  width: 100%;
}

// css-grid($columns, $rows, $column-gaps, $grid-row-gaps, $type)
//
// Creates a CSS grid container. <i>To debug, view in Firefox inspector and enable the grid overlay.</i>
//
// Compatible in IE11+, Firefox 54+, Safari 10.1+, Chrome 59+.
//
// $columns - Defines the number of grid columns. Default: <code>$css-grid-columns</code>
// $rows - Defines the number of grid rows. Default: <code>(small: none, medium: none)</code>
// $column-gaps - Specifies the size of the grid lines between the columns. Default: <code>$css-grid-column-gaps</code>
// $row-gaps - Specifies the size of the grid lines between the rows. Default: <code>$css-grid-row-gaps</code>
// $type - Defines the grid formatting context. Default: <code>grid</code>
//
// Style guide: frontend.mixins.grid
@mixin css-grid($columns: $css-grid-columns, $rows: (small: none, medium: none), $column-gaps: $css-grid-column-gaps, $row-gaps: $css-grid-row-gaps, $type: grid) {
  // scss-lint:disable PropertySpelling
  display: $type;
  grid-column-gap: map-get($column-gaps, small);
  grid-row-gap: map-get($row-gaps, small);
  grid-template-columns: repeat(map-get($columns, small), 1fr);
  grid-template-rows: map-get($rows, small);

  @include breakpoint(medium) {
    grid-column-gap: map-get($column-gaps, medium);
    grid-row-gap: map-get($row-gaps, medium);
    grid-template-columns: repeat(map-get($columns, medium), 1fr);
    grid-template-rows: map-get($rows, medium);
  }
}

// css-grid-item($column-start, $column-end, $row-start, $row-end)
//
// Creates a CSS grid container item. <i>View in Firefox inspector to see a grid overlay.</i>
//
// Compatible in IE11+, Firefox 54+, Safari 10.1+, Chrome 59+.
//
// $column-start - Defines which column the grid item should start at. Default: <code>(small: auto, medium: auto)</code>
// $column-end - Defines which column the grid item should end at. Default: <code>(small: auto, medium: auto)</code>
// $row-start - Defines which row the grid item should start at. Default: <code>(small: auto, medium: auto)</code>
// $row-end - Defines which row the grid item should end at. Default: <code>(small: auto, medium: auto)</code>
//
// Style guide: frontend.mixins.grid-item
@mixin css-grid-item($column-start: (small: auto, medium: auto), $column-end: (small: auto, medium: auto), $row-start: (small: auto, medium: auto), $row-end: (small: auto, medium: auto)) {
  // scss-lint:disable PropertySpelling
  grid-column-end: map-get($column-end, small);
  grid-column-start: map-get($column-start, small);
  grid-row-end: map-get($row-end, small);
  grid-row-start: map-get($row-start, small);

  @include breakpoint(medium) {
    grid-column-end: map-get($column-end, medium);
    grid-column-start: map-get($column-start, medium);
    grid-row-end: map-get($row-end, medium);
    grid-row-start: map-get($row-start, medium);
  }
}

// throbber($style)
//
// Styles a throbber element.
//
// Compatible in IE11+, Firefox 54+, Safari 10.1+, Chrome 49+.
//
// $width     - Defines the throbber width. Default: <code>rem-calc(40)</code>
// $height    - Defines the throbber height. Default: <code>rem-calc(40)</code>
// $color     - Defines the throbber color. Default: <code>$primary-color</code>
// $opacity   - Defines the throbber opacity. Default: <code>$opacity</code>
// $radius    - Defines the throbber radius. Default: <code>$global-radius</code>
// $animation - Defines the throbber animation (<em>keyframes available: throbber-rotateplane|throbber-scaleout</em>). Default: <code>throbber-rotateplane 1.2s infinite ease-in-out</code>
//
// Style guide: frontend.mixins.throbber
@mixin throbber($width: rem-calc(40), $height: rem-calc(40), $color: $primary-color, $opacity: .9, $radius: $global-radius, $animation: throbber-rotateplane 1.2s infinite ease-in-out) {
  animation: $animation;
  background: $color;
  border-radius: $radius;
  height: $height;
  left: 50%;
  opacity: $opacity;
  top: 50%;
  transform: translateY(-50%) translateX(-50%);
  width: $width;

  @keyframes throbber-rotateplane {
    0% {
      transform: perspective(120px) rotateX(0deg) rotateY(0deg);
    }

    50% {
      transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);
    }

    100% {
      transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);
    }
  }

  @keyframes throbber-scaleout {
    0% {
      transform: scale(0);
    }

    100% {
      opacity: 0;
      transform: scale(1);
    }
  }
}
